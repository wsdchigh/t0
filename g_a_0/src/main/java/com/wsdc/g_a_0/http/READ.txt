                            实现一个简单的HTTP服务器和服务器

<li>    体现一个非阻塞的概念(NIO)
        <li>    服务端 不阻塞
        <li>    客户端 不阻塞
                <li>    通常的行为是，针对每一个http请求均通过一个线程去处理
                <li>    使用一个线程同时处理多个http任务  (减少大量http请求是开辟大量的线程，而造成CPU压力加大)


<li>    流程分析
        读取
        <li>    在轮询的过程之中，如果socket可以读取数据，那么一次性读取64B字节(只会读取这么多，如果能够读取更多，等待下一次的读取)
        <li>    读取到数据之后(只有读取了数据才执行这个判断)，判断缓存的数组中，是否能够生成一条有效的判断数据
                <li>    响应行
                <li>    响应头
                <li>    响应体
                <li>    响应行和响应头均是通过\r\n来识别结束，也就是说，当前读取的缓存数组中包含\r\n那么截取到这个位置
                        响应行只有一行，并且是最上面的
                        响应头和响应体之间隔着2个\r\n
                        <li>    响应体不是\r\n标识
                        <li>    响应头中的content-type决定了响应体的长度
                        <li>    响应体如果是分段传输，那么响应体自身携带着片歇息
                                <li>    片包含，片头和片主体，相当于缩小版的响应头和响应体
                                <li>    片与片之间，是两个\r\n
                                <li>    结尾的片标识的长度为0
                                <li>    大文件使用片传输(通常超过4K的文件内容均使用分片传输)
